NAME
    PerlIO::via::Limit - PerlIO layer for length restrictions

SYNOPSIS
        use PerlIO::via::Limit;
        PerlIO::via::Limit->length(20);
        # - or -
        use PerlIO::via::Limit length => 20;

        # reading
        open( my $fh, "<:via(Limit)", $file );

        # writing
        open( my $fh, ">:via(Limit)", $file );

DESCRIPTION
    PerlIO::via::Limit implements a PerlIO layer that restricts length of
    stream.

CLASS METHODS
  create
    Create an anonymous class that is inheritable PerlIO::via::Limit.

    In order to use two or more limit values, we have to split namespace.

        # It does not work as expected. 

        PerlIO::via::Limit->length(256);
        open( my $fh1, "<:via(Limit)", $file1 );

        PerlIO::via::Limit->length(100);
        open( my $fh2, "<:via(Limit)", $file2 );

        local $/ = undef;
        my $data1 = <$fh1>; 
        my $data2 = <$fh2>; 

        CORE::length($data1); # is not 256 but 100
        CORE::length($data2); # is also 100

    This method supports it by easy way.

        my $limit256 = PerlIO::via::Limit->create(256);
        my $limit100 = PerlIO::via::Limit->create;

        $limit256->sensitive(1);
        $limit100->length(100);

        open( my $fh1, "<:via($limit256)", $file1 );
        open( my $fh2, "<:via($limit100)", $file2 );

    It also accepts an optional parameter for 'length' available.

  length
    Limit length of stream. Default is undef that means unlimited.

  sensitive
    If set true value, an exception will be occurred when stream reaches
    limit of length. Default is false.

        use PerlIO::via::Limit sensitive => 1;

        open( my $in, "<:via(Limit)", $file ) or die;
        eval {
            while( <$in> ){
                # do something...
            }
        };if( $@ ){
            # "$in is trying to read exceeding the limit."
            warn "$@";
        }
        close $in or die;

    Note that the $@ is an Exception::Class object.

BUGS
    When the exception is thrown by sensitive option, the buffer for reading
    does not be filled.

SEE ALSO
    PerlIO::via

    Exception::Class

REPOSITORY
    PerlIO::via::Limit is hosted on github
    <https://github.com/hiroaki/PerlIO-via-Limit>

AUTHOR
    WATANABE Hiroaki <hwat@cpan.org>

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

